Query: Create 5 books with the following names: C Sharp, Java, Python, PHP, Ruby:


>>> from BA_app.models import *
>>> Book.objects.create(title="C Sharp")
<Book: Book object (1)>
>>> Book.objects.create(title="Java")
<Book: Book object (2)>
>>> Book.objects.create(title="Python")
<Book: Book object (3)>
>>> Book.objects.create(title="PHP")
<Book: Book object (4)>
>>> Book.objects.create(title="Ruby")
<Book: Book object (5)>
>>>


Query: Create 5 different authors: Jane Austen, Emily Dickinson, Fyodor Dostoevsky, William Shakespeare, Lau Tzu:

>>> Author.objects.create(first_name="Jane", last_name="Austen")
<Author: Author object (1)>
>>> Author.objects.create(first_name="Emily", last_name="Dickinson")
<Author: Author object (2)>
>>> Author.objects.create(first_name="Fyodor", last_name="Dostoevsky")
<Author: Author object (3)>
>>> Author.objects.create(first_name="William", last_name="Shakespeare")
<Author: Author object (4)>
>>> Author.objects.create(first_name="Lau", last_name="Tzu")
<Author: Author object (5)>


Add a new text field in the authors table called 'notes'.:

(djangoEnv) C:\Users\Quantum\OneDrive\Desktop\Python\Assignments\Django\BA_Shell>py manage.py makemigrations
It is impossible to add a non-nullable field 'notes' to author without specifying a default. This is because the database needs something to populate existing rows.
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit and manually define a default value in models.py.
Select an option: 1
Please enter the default value as valid Python.
The datetime and django.utils.timezone modules are available, so it is possible to provide e.g. timezone.now as a value.
Type 'exit' to exit this prompt
>>> One Author has many books, many books has one Author.
Invalid input: invalid syntax (<string>, line 1)
>>> "One Author has many books, many books has one Author."
Migrations for 'BA_app':
  BA_app\migrations\0002_author_books_author_notes.py
    + Add field books to author
    + Add field notes to author

(djangoEnv) C:\Users\Quantum\OneDrive\Desktop\Python\Assignments\Django\BA_Shell>py manage.py migrate
Operations to perform:


Query: Change the name of the C Sharp book to C#:

>>> from BA_app.models import *
>>> book1 = Book.objects.get(id=1)
>>> book1.title="C#"
>>> book1.save()
>>>

Query: Change the first name of the 4th author to Bill:

>>> author1 = Author.objects.get(id=4)
>>> author1.first_name="Bill"
>>> author1.save()


Query: Assign the first author to the first 2 books:

>>> book1 = Book.objects.get(id=1)
>>> book1.title="C#"
>>> book1.save()
>>> author1 = Author.objects.get(id=4)
>>> author1.first_name="Bill"
>>> author1.save()
>>> first_author = Author.objects.first()
>>> book1 = Book.objects.get(id=1)
>>> book2 = Book.objects.get(id=2)
>>> first_author = book1
>>> first_author = book2
>>> first_author.save()
>>> two_books = Book.objects.all()[:2]
>>> for book in two_books:
...
... author1
  File "<console>", line 3
    author1
    ^^^^^^^
IndentationError: expected an indented block after 'for' statement on line 1
>>> author1
<Author: Author object (4)>
>>>  author1 = Author.objects.get(id=1)
  File "<console>", line 1
    author1 = Author.objects.get(id=1)
IndentationError: unexpected indent
>>> author1 = Author.objects.get(id=1)
>>> book1
<Book: Book object (1)>
>>> book2
<Book: Book object (2)>
>>> author1
<Author: Author object (1)>
>>> author1.writers.add(book1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Author' object has no attribute 'writers'
>>> author1.writers.add(book1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Author' object has no attribute 'writers'
>>> book1.writers.add(author1)
>>> author1.books.add(book1)
>>> author1.books.add(book2)
>>>


Query: Assign the second author to the first 3 books:

>>> author2 = Author.objects.get(id=2)
>>> book3 = Book.objects.get(id=3)
>>> author2.books.add(book1)
>>> author2.books.add(book2)
>>> author2.books.add(book3)
>>>


Query: Assign the third author to the first 4 books:


>>> author3.books.add(book1)
>>> author3.books.add(book2)
>>> author3.books.add(book3)
>>> author3.books.add(book4)


Query: Assign the fourth author to the first 5 books (or in other words, all the books):

>>> author4 = Author.objects.get(id=4)
>>> book5 = Book.objects.get(id=5)
>>> author4.books.add(book1)
>>> author4.books.add(book2)
>>> author4.books.add(book3)
>>> author4.books.add(book4)
>>> author4.books.add(book5)
>>>


Query: Retrieve all the authors for the 3rd book:

>>> book3.writers.all()
<QuerySet [<Author: Author object (2)>, <Author: Author object (3)>, <Author: Author object (4)>]>


Query: Remove the first author of the 3rd book:

>>> author2.delete()
(4, {'BA_app.Author_books': 3, 'BA_app.Author': 1})
>>>

Query: Add the 5th author as one of the authors of the 2nd book:


>>> author5 = Author.objects.get(id=5)
>>> author5.books.add(book2)
>>>

Query: Find all the books that the 3rd author is part of:

>>> author3.books.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>]>
>>>


Query: Find all the authors that contributed to the 5th book:


>>> book5.writers.all()
<QuerySet [<Author: Author object (4)>]>


Submit your .txt file that contains all the queries you ran in the shell:

THIS IS OUR SIGNATURE! * SUBMITTED!! *
